# coding: utf-8

"""
    Enabled Robotics REST Interface

    REST Interface exposed by Enabled Robotics  # noqa: E501

    OpenAPI spec version: 0.1-oas3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from er.models.state import State  # noqa: F401,E501

class Status(State):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_program': 'Program',
        'battery': 'int',
        'message': 'str'
    }
    if hasattr(State, "swagger_types"):
        swagger_types.update(State.swagger_types)

    attribute_map = {
        'current_program': 'current_program',
        'battery': 'battery',
        'message': 'message'
    }
    if hasattr(State, "attribute_map"):
        attribute_map.update(State.attribute_map)

    def __init__(self, current_program=None, battery=None, message=None, *args, **kwargs):  # noqa: E501
        """Status - a model defined in Swagger"""  # noqa: E501
        self._current_program = None
        self._battery = None
        self._message = None
        self.discriminator = None
        if current_program is not None:
            self.current_program = current_program
        if battery is not None:
            self.battery = battery
        if message is not None:
            self.message = message
        State.__init__(self, *args, **kwargs)

    @property
    def current_program(self):
        """Gets the current_program of this Status.  # noqa: E501


        :return: The current_program of this Status.  # noqa: E501
        :rtype: Program
        """
        return self._current_program

    @current_program.setter
    def current_program(self, current_program):
        """Sets the current_program of this Status.


        :param current_program: The current_program of this Status.  # noqa: E501
        :type: Program
        """

        self._current_program = current_program

    @property
    def battery(self):
        """Gets the battery of this Status.  # noqa: E501


        :return: The battery of this Status.  # noqa: E501
        :rtype: int
        """
        return self._battery

    @battery.setter
    def battery(self, battery):
        """Sets the battery of this Status.


        :param battery: The battery of this Status.  # noqa: E501
        :type: int
        """

        self._battery = battery

    @property
    def message(self):
        """Gets the message of this Status.  # noqa: E501


        :return: The message of this Status.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Status.


        :param message: The message of this Status.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Status, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Status):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
